一.配置MIPI
1. <ComboMode>0</ComboMode>：lane1为clock，lane0，2，3，4为data
    <LaneAssign>0x4320</LaneAssign>： 	CPU lane0对应sensor data lane 0，默认lane 1作为clock不用配置
									CPU lane2对应sensor data lane 1
									CPU lane3对应sensor data lane 2
									CPU lane4对应sensor data lane 3

2. <ComboMode>1</ComboMode>：lane 1为camera 1的clock， lane 4为camera 2的clock
    a. camera 1配置：
        <LaneAssign>0x0020</LaneAssign>:    camera 1使用lane 0， 2作为data，默认lane 1作为clock不用配置
									        CPU lane0对应sensor data lane 0
									        CPU lane2对应sensor data lane 1
        <LaneMask>0x3</LaneMask>： 	使能lane 0，1，2
    b. camera 2配置：
        <LaneAssign>0x0003</LaneAssign>：    camera 2使用lane 3作为data，默认lane 4作为clock不用配置
									         CPU lane3对应sensor data lane 0
        <LaneMask>0x18</LaneMask>： 	使能lane 3，4

        <LaneAssign>定义
            15:12 MSM 侧 PHY 通道编号，连接传感器的数据通道 3
            11:8 MSM 侧 PHY 通道编号，连接传感器的数据通道 2
            7:4 MSM 侧 PHY 通道编号，连接传感器的数据通道 1
            3:0 MSM 侧 PHY 通道编号，连接传感器的数据通道 0

二.扫描头FPS大于60，如果扫描头+camera数量<=2，则导致下完软件第一次不能开机
扫描头会配置为camera，第一次开机的时候会对camera的参数进行读取，默认只对camera ID为1和2的camera读取，
MSM8937/MSM8917支持的camera最大FPS为30，当FPS大于60时会导致camera参数结构体中的FPS域为空，JAVA调用时会取不到数据，相当于空指针导致不能开机。
a. android/vendor/qcom/proprietary/mm-camera/mm-camera2/media-controller/mct/pipeline/mct_pipeline.c中如下获取系统支持的最大FPS，如果没有指定则最大的FPS为30
    /*Determine max preview fps supported on device */
    memset(fps_str, 0, PROPERTY_VALUE_MAX);
    property_get("persist.camera.max.previewfps", fps_str, "30");
    preview_max_fps = (float)atoi(fps_str);
    CLOGD(CAM_MCT_MODULE, "preview_max_fps = %f", preview_max_fps);
b.  mct_pipeline_fill_dimensions_snapshot函数中如下部分对sensor_lib.h中的所有FPS轮询设置，如果FPS大于系统支持的最大FPS则会不设置sensor支持的FPS
    /* Filter sensor table for fps range selection */
    memset(sensor_fps_table, 0, MAX_FPS_RANGE_ENTRIES * sizeof(cam_dimension_t));
    for (i = 0; i < local_data->sensor_cap.dim_fps_table_count; i++) {
        /* Allow only integer, non-duplicate, non-HFR entries */
        if ((uint32_t)(local_data->sensor_cap.dim_fps_table[i].fps.max_fps) <= preview_max_fps) {
            if ( (sensor_table_index < MAX_FPS_RANGE_ENTRIES) &&
            FALSE == mct_util_check_matching_fps (
            local_data->sensor_cap.dim_fps_table[i].fps,
            sensor_fps_table, sensor_table_index) ) {
                sensor_fps_table[sensor_table_index].min_fps =
                (uint32_t)(local_data->sensor_cap.dim_fps_table[i].fps.min_fps);
                sensor_fps_table[sensor_table_index].max_fps =
                (uint32_t)(local_data->sensor_cap.dim_fps_table[i].fps.max_fps);
                sensor_table_index++;
            } else if (sensor_table_index == MAX_FPS_RANGE_ENTRIES) {
                CLOGW(CAM_MCT_MODULE,
                "Running out of limit for sensor_fps_table. Consider increasing \
                MAX_FPS_RANGE_ENTRIES");
            }
        }  
    }
